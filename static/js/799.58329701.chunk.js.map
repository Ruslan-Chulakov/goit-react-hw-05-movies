{"version":3,"file":"static/js/799.58329701.chunk.js","mappings":"gQAEeA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCC,GAAhC,6EACc,sCACA,4CAFd,SAIyBC,EAAAA,EAAAA,IAAA,UAHX,uCAGW,OAFX,4CAEW,kBACMD,IAC1BE,MAAK,SAAUC,GACd,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAMF,GAElB,OAAOA,EAASG,IACjB,IACAC,OAAM,SAAUC,GACfC,QAAQD,MAAMA,EACf,IAdL,cAIQL,EAJR,yBAgBSA,GAhBT,kEAmBA,M,SAnBgC,GAAjBJ,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,SCkEf,EA/De,WACb,OAA0BW,EAAAA,EAAAA,UAAS,IAAnC,eAAOV,EAAP,KAAcW,EAAd,KACA,GAA0CD,EAAAA,EAAAA,UAAS,IAAnD,eAAOE,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAYF,EAAaG,IAAI,aAC7BC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACJJ,GACFlB,EAAiBkB,EAAUK,QAAQpB,MAAK,SAAAC,GAAQ,OAC9CU,EAAiBV,EAASoB,QADoB,GAInD,GAAE,CAACN,IAqBF,OACE,6BACE,yCAEA,kBAAMO,SAlBS,SAACC,GACpBA,EAAIC,iBAEU,KAAV1B,IAIJgB,EAAgB,CAAEC,UAAWjB,EAAMsB,SACnCvB,EAAiBkB,GACdf,MAAK,SAAAC,GAAQ,OAAIU,EAAiBV,EAASoB,QAA9B,IAEhBZ,EAAS,IACV,EAMK,WACE,uCAEE,kBAAOgB,KAAK,OAAOC,MAAO5B,EAAO6B,SA1BtB,SAACJ,GACpB,IAAMzB,EAAQyB,EAAIK,OAAOF,MACzBjB,EAASX,EACV,QAyBO,+CAGF,wBAC4B,IAAxBY,EAAcmB,OAAenB,EAAcoB,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOC,EAAb,EAAaA,YAAb,OAC/C,SAAC,KAAD,CAAMC,GAAE,UAAKH,GAAeI,MAAO,CAACC,KAAMnB,GAA1C,UACE,0BACIgB,IAAe,gBACfI,IAAG,yCAAoCJ,GACvCK,IAAI,KAELN,MANmBD,EADuB,KAU1C,0CAIhB,C","sources":["utils/fetchSearchMovie.js","Pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nasync function fetchSearchMovie(query) {\n  const URL = '//api.themoviedb.org/3/search/movie';\n  const KEY = '?api_key=4278d0f19129b6ab2e3afba6e510ceec';\n\n  const response = await axios\n    .get(`${URL}${KEY}&query=${query}`)\n    .then(function (response) {\n      if (response.status !== 200) {\n        throw new Error(response);\n      }\n      return response.data;\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  \n  return response;\n}\n\nexport default fetchSearchMovie;\n","import { useEffect } from \"react\";\nimport { useState } from \"react\"\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport fetchSearchMovie from \"utils/fetchSearchMovie\"\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('movieName');\n  const location = useLocation()\n  \n  useEffect(() => {\n    if (movieName) {\n      fetchSearchMovie(movieName.trim()).then(response =>\n        setSearchResults(response.results)\n      );\n    }\n  }, [movieName])\n \n  const handleChange = (evt) => {\n    const query = evt.target.value;\n    setQuery(query);\n  }\n  \n  const handleSubmit = (evt) => {\n    evt.preventDefault()\n    \n    if (query === '') {\n      return\n    }\n\n    setSearchParams({ movieName: query.trim() });\n    fetchSearchMovie(movieName) \n      .then(response => setSearchResults(response.results));\n    \n    setQuery('');\n  }\n  \n    return (\n      <main>\n        <h1>Movies page</h1>\n\n        <form onSubmit={handleSubmit}>\n          <label>\n            search\n            <input type=\"text\" value={query} onChange={handleChange} />\n          </label>\n          <button>Find Movie</button>\n        </form>\n\n        <ul>\n          {(searchResults.length !==0) ? searchResults.map(({id, title, poster_path}) => (\n            <Link to={`${id}`} key={id} state={{from: location}}>\n              <li>\n                { poster_path && <img\n                  src={`https://image.tmdb.org/t/p/w200${poster_path}`}\n                  alt=\"\"\n                />}\n                {title}\n              </li>\n            </Link>\n          )) : ( <p>No results</p>  )}\n        </ul>\n      </main>\n    );\n}\n\nexport default Movies;"],"names":["fetchSearchMovie","query","axios","then","response","status","Error","data","catch","error","console","useState","setQuery","searchResults","setSearchResults","useSearchParams","searchParams","setSearchParams","movieName","get","location","useLocation","useEffect","trim","results","onSubmit","evt","preventDefault","type","value","onChange","target","length","map","id","title","poster_path","to","state","from","src","alt"],"sourceRoot":""}